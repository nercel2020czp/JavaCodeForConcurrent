轻量级锁的使用场景：
	如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以
	使用轻量级锁来优化。
	
	轻量级锁对使用者是透明的，即语法仍然是 synchronized
	
	假设有两个方法同步块，利用同一个对象加锁
	
	static final Object obj = new Object();
	public static void method1() {
		synchronized( obj ) {
			// 同步块 A
			method2();
		}
	}
	public static void method2() {
		synchronized( obj ) {
			// 同步块 B
		}
	}
	
-----------------------------------------------------
1.创建锁记录（Lock Record）对象，每个线程都的栈帧都会包含一个锁记录的结构，
     内部可以存储锁定对象的Mark Word
     
2.让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 
     的 Mark Word，将 Mark Word 的值存入锁记录
     
3.如果 cas 替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象
    加锁，这时图示如下
    
4.synchronized 原理进阶
	4.1 如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程
	4.2 如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数