package 第04章_共享模型之管程.s01_共享带来的问题;
/*


以上的结果可能是正数、负数、零。为什么呢？
	因为 Java 中对静态变量的自增，自减并不是原子操作，要彻底理解，必须从字节码来进行分析
	例如对于 i++ 而言（i 为静态变量），实际会产生如下的 JVM 字节码指令:
		getstatic i // 获取静态变量i的值
		iconst_1 // 准备常量1
		iadd // 自增
		putstatic i // 将修改后的值存入静态变量i
	而对应 i-- 也是类似：
		getstatic i // 获取静态变量i的值
		iconst_1 // 准备常量1
		isub // 自减
		putstatic i // 将修改后的值存入静态变量i
		
	而 Java 的内存模型如下，完成静态变量的自增，自减需要在主存和工作内存中进行数据交换：
	【见图1.png】
	
	如果是单线程以上 8 行代码是顺序执行（不会交错）没有问题：
	【见图2.png】
	
	但多线程下这 8 行代码可能交错运行：
	出现负数的情况：
	【见图3.png】
	
	出现正数的情况：
	【见图4.png】


*/
public class Test03_问题分析 {

}
