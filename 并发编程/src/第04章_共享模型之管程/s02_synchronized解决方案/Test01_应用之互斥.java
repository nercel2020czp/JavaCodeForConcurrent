package 第04章_共享模型之管程.s02_synchronized解决方案;
/*
为了避免临界区的竞态条件发生，有多种手段可以达到目的。
	阻塞式的解决方案：synchronized，Lock
	非阻塞式的解决方案：原子变量
	
	本次课使用阻塞式的解决方案：synchronized，来解决上述问题，即俗称的【对象锁】，
	它采用互斥的方式让同一时刻至多只有一个线程能持有【对象锁】，其它线程再想获取这个
	【对象锁】时就会阻塞住。这样就能保证拥有锁的线程可以安全的执行临界区内的代码，
	不用担心线程上下文切换
	
	注意:
		虽然 java 中互斥和同步都可以采用 synchronized 关键字来完成，但它们还是有区别的：
			1.互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码
			2.同步是由于线程执行的先后、顺序不同、需要一个线程等待其它线程运行到某个点
	
	
*/
public class Test01_应用之互斥 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
